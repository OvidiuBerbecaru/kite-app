{"ast":null,"code":"var _jsxFileName = \"/Users/OviB/Desktop/kite-app/src/components/GoogleMap/GoogleMap.js\";\nimport React, { useState } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport './GoogleMap.scss';\nimport LocationPin from './LocationPin';\nimport SpotInfoCard from './SpotInfoCard';\nimport * as R from 'ramda';\n\nconst Map = ({\n  location,\n  zoomLevel,\n  className,\n  spots\n}) => {\n  const [openedSpot, setOpenedSpot] = useState({});\n\n  const onSpotClick = id => {\n    const spot = spots.filter(spot => spot.id === id)[0];\n    setOpenedSpot({\n      lat: Number(spot.lat),\n      lng: Number(spot.long),\n      name: spot.name,\n      country: spot.country,\n      month: spot.month,\n      probability: spot.probability\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `google-map ${className}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: 'AIzaSyCDQY2Gatxh38awcCqZzSBF-BgwZzV2HVk'\n    },\n    defaultCenter: {\n      lat: 59.95,\n      lng: 30.33\n    },\n    center: !R.isEmpty(openedSpot) && {\n      lat: Number(openedSpot.lat),\n      lng: Number(openedSpot.lng)\n    },\n    defaultZoom: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, spots && spots.map(spot => /*#__PURE__*/React.createElement(LocationPin, {\n    lat: spot.lat,\n    lng: spot.long,\n    isFavouriteSpot: spot.isFavouriteSpot,\n    onClick: onSpotClick,\n    id: spot.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  })), !R.isEmpty(openedSpot) && /*#__PURE__*/React.createElement(SpotInfoCard, {\n    lat: openedSpot.lat,\n    lng: openedSpot.lng,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Map;","map":{"version":3,"sources":["/Users/OviB/Desktop/kite-app/src/components/GoogleMap/GoogleMap.js"],"names":["React","useState","GoogleMapReact","LocationPin","SpotInfoCard","R","Map","location","zoomLevel","className","spots","openedSpot","setOpenedSpot","onSpotClick","id","spot","filter","lat","Number","lng","long","name","country","month","probability","key","isEmpty","map","isFavouriteSpot"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,kBAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,SAAZ;AAAuBC,EAAAA,SAAvB;AAAkCC,EAAAA;AAAlC,CAAD,KAA+C;AACzD,QAAM,CAAEC,UAAF,EAAcC,aAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMY,WAAW,GAAIC,EAAD,IAAQ;AAC1B,UAAMC,IAAI,GAAGL,KAAK,CAACM,MAAN,CAAaD,IAAI,IAAIA,IAAI,CAACD,EAAL,KAAYA,EAAjC,EAAqC,CAArC,CAAb;AACAF,IAAAA,aAAa,CAAC;AACZK,MAAAA,GAAG,EAAEC,MAAM,CAACH,IAAI,CAACE,GAAN,CADC;AAEZE,MAAAA,GAAG,EAAED,MAAM,CAACH,IAAI,CAACK,IAAN,CAFC;AAGZC,MAAAA,IAAI,EAAEN,IAAI,CAACM,IAHC;AAIZC,MAAAA,OAAO,EAAEP,IAAI,CAACO,OAJF;AAKZC,MAAAA,KAAK,EAAER,IAAI,CAACQ,KALA;AAMZC,MAAAA,WAAW,EAAET,IAAI,CAACS;AANN,KAAD,CAAb;AAQD,GAVD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAG,cAAaf,SAAU,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAE;AAAEgB,MAAAA,GAAG,EAAE;AAAP,KADpB;AAEE,IAAA,aAAa,EAAE;AACbR,MAAAA,GAAG,EAAE,KADQ;AAEbE,MAAAA,GAAG,EAAE;AAFQ,KAFjB;AAME,IAAA,MAAM,EACJ,CAACd,CAAC,CAACqB,OAAF,CAAUf,UAAV,CAAD,IAA0B;AAAEM,MAAAA,GAAG,EAAEC,MAAM,CAACP,UAAU,CAACM,GAAZ,CAAb;AAA+BE,MAAAA,GAAG,EAAED,MAAM,CAACP,UAAU,CAACQ,GAAZ;AAA1C,KAP9B;AASE,IAAA,WAAW,EAAE,CATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWIT,KAAK,IACLA,KAAK,CAACiB,GAAN,CAAUZ,IAAI,iBACZ,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEA,IAAI,CAACE,GADZ;AAEE,IAAA,GAAG,EAAEF,IAAI,CAACK,IAFZ;AAGE,IAAA,eAAe,EAAEL,IAAI,CAACa,eAHxB;AAIE,IAAA,OAAO,EAAEf,WAJX;AAKE,IAAA,EAAE,EAAEE,IAAI,CAACD,EALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAZJ,EAsBI,CAACT,CAAC,CAACqB,OAAF,CAAUf,UAAV,CAAD,iBACA,oBAAC,YAAD;AAAc,IAAA,GAAG,EAAEA,UAAU,CAACM,GAA9B;AAAmC,IAAA,GAAG,EAAEN,UAAU,CAACQ,GAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBJ,CADF,CADF;AA8BD,CA7CD;;AA+CA,eAAeb,GAAf","sourcesContent":["import React, { useState } from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport './GoogleMap.scss'\nimport LocationPin from './LocationPin';\nimport SpotInfoCard from './SpotInfoCard';\nimport * as R from 'ramda';\n\nconst Map = ({ location, zoomLevel, className, spots }) => {\n  const [ openedSpot, setOpenedSpot ] = useState({});\n\n  const onSpotClick = (id) => {\n    const spot = spots.filter(spot => spot.id === id)[0]\n    setOpenedSpot({\n      lat: Number(spot.lat),\n      lng: Number(spot.long),\n      name: spot.name,\n      country: spot.country,\n      month: spot.month,\n      probability: spot.probability,\n    })\n  }\n\n  return (\n    <div className={`google-map ${className}`}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: 'AIzaSyCDQY2Gatxh38awcCqZzSBF-BgwZzV2HVk' }}\n        defaultCenter={{\n          lat: 59.95,\n          lng: 30.33\n        }}\n        center = {\n          !R.isEmpty(openedSpot) && { lat: Number(openedSpot.lat), lng: Number(openedSpot.lng)}\n        }\n        defaultZoom={1}\n      >\n        { spots &&\n          spots.map(spot => \n            <LocationPin\n              lat={spot.lat}\n              lng={spot.long}\n              isFavouriteSpot={spot.isFavouriteSpot}\n              onClick={onSpotClick}\n              id={spot.id}\n            />  \n          )\n        }\n        { !R.isEmpty(openedSpot) &&\n          <SpotInfoCard lat={openedSpot.lat} lng={openedSpot.lng}/>\n        }\n      </GoogleMapReact>\n    </div>\n  )\n}\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}