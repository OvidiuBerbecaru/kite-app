{"ast":null,"code":"var _jsxFileName = \"/Users/OviB/Desktop/kite-app/src/providers/RefetchProvider.js\";\nimport React, { createContext, useState, useContext } from 'react';\nconst Refetch = createContext({\n  onRefetchToggle: () => {}\n});\n\nconst RefetchProvider = props => {\n  const [refetch, setRefetch] = useState(false);\n\n  const onRefetchToggle = () => {\n    setRefetch(!refetch);\n  };\n\n  return /*#__PURE__*/React.createElement(RefetchProvider.Provider, Object.assign({\n    value: {\n      refetch,\n      onRefetchToggle\n    }\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst useRefetch = () => useContext(Refetch);\n\nexport { RefetchProvider, useRefetch };","map":{"version":3,"sources":["/Users/OviB/Desktop/kite-app/src/providers/RefetchProvider.js"],"names":["React","createContext","useState","useContext","Refetch","onRefetchToggle","RefetchProvider","props","refetch","setRefetch","useRefetch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,UAAzC,QAA2D,OAA3D;AAEA,MAAMC,OAAO,GAAGH,aAAa,CAAC;AAC5BI,EAAAA,eAAe,EAAE,MAAM,CAAE;AADG,CAAD,CAA7B;;AAIA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMG,eAAe,GAAG,MAAM;AAC5BI,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAKA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AAAEA,MAAAA,OAAF;AAAWH,MAAAA;AAAX;AADT,KAEME,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAMD,CAdD;;AAgBA,MAAMG,UAAU,GAAG,MAAMP,UAAU,CAACC,OAAD,CAAnC;;AACA,SAASE,eAAT,EAA0BI,UAA1B","sourcesContent":["import React, { createContext, useState, useContext } from 'react';\n\nconst Refetch = createContext({\n  onRefetchToggle: () => {},\n});\n\nconst RefetchProvider = (props) => {\n  const [refetch, setRefetch] = useState(false);\n\n  const onRefetchToggle = () => {\n    setRefetch(!refetch);\n  };\n\n\n  return (\n    <RefetchProvider.Provider\n      value={{ refetch, onRefetchToggle }}\n      {...props}\n    />\n  );\n};\n\nconst useRefetch = () => useContext(Refetch);\nexport { RefetchProvider, useRefetch };"]},"metadata":{},"sourceType":"module"}