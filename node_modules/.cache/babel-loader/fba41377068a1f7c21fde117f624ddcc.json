{"ast":null,"code":"var _jsxFileName = \"/Users/OviB/Desktop/kite-app/src/components/Main/Main.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport * as R from 'ramda';\nimport { environment } from '../../environments/environment';\nimport NavBar from '../NavBar/NavBar';\nimport GoogleMap from '../GoogleMap/GoogleMap';\nimport { useRefetch } from '../../providers/RefetchProvider';\n\nconst Main = () => {\n  const [cookies] = useCookies(['tokenCookie']);\n  const [userData, setUserData] = useState({});\n  const [spots, setSpots] = useState([]);\n  const [favouriteSpots, setFavouriteSpots] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    refetch\n  } = useRefetch();\n  useEffect(() => {\n    axios.get(`${environment.apiPath}/user/${cookies.tokenCookie}`).then(response => {\n      setUserData(response);\n    }).catch(error => {\n      if (error.response) {\n        toast.error(\"Oups ! We couldn't get your user info\");\n      }\n    });\n  }, [cookies]);\n  useEffect(() => {\n    axios.get(`${environment.apiPath}/favourites`).then(response => {\n      setIsLoading(true);\n      setFavouriteSpots(R.uniq(response.data.map(spot => ({\n        spot: spot.spot.toString(),\n        favId: spot.id\n      }))));\n    }).catch(error => {\n      if (error.response) {\n        toast.error(\"Oups ! We couldn't get your favourites spots\");\n        setIsLoading(false);\n      }\n    });\n  }, [refetch]);\n  useEffect(() => {\n    axios.get(`${environment.apiPath}/spot`).then(response => {\n      const spots = response.data.map(spot => R.isEmpty(favouriteSpots.filter(favSpot => favSpot.spot === spot.id)) ? spot : { ...spot,\n        isFavouriteSpot: true,\n        favSpotId: favouriteSpots.filter(favSpot => favSpot.spot === spot.id)[0].favId\n      });\n      setTimeout(() => setIsLoading(false), 2000); // setIsLoading(false);\n\n      setSpots(spots);\n    }).catch(error => {\n      if (error.response) {\n        toast.error(\"Oups ! We couldn't get the spots\");\n        setIsLoading(false);\n      }\n    });\n  }, [favouriteSpots]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main d-flex flex-wrap justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    userInfo: userData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMap, {\n    spots: spots,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Main;","map":{"version":3,"sources":["/Users/OviB/Desktop/kite-app/src/components/Main/Main.js"],"names":["React","useEffect","useState","useCookies","toast","axios","R","environment","NavBar","GoogleMap","useRefetch","Main","cookies","userData","setUserData","spots","setSpots","favouriteSpots","setFavouriteSpots","isLoading","setIsLoading","refetch","get","apiPath","tokenCookie","then","response","catch","error","uniq","data","map","spot","toString","favId","id","isEmpty","filter","favSpot","isFavouriteSpot","favSpotId","setTimeout"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport * as R from 'ramda';\nimport { environment } from '../../environments/environment';\nimport NavBar from '../NavBar/NavBar';\nimport GoogleMap from '../GoogleMap/GoogleMap';\nimport { useRefetch } from '../../providers/RefetchProvider'\n\nconst Main = () => {\n  const [cookies] = useCookies(['tokenCookie']);\n  const [userData, setUserData] = useState({});\n  const [spots, setSpots] = useState([]);\n  const [favouriteSpots, setFavouriteSpots] = useState([]);\n  const [ isLoading, setIsLoading ] = useState(false);\n  const { refetch } = useRefetch();\n\n  useEffect(() => {\n    axios\n      .get(`${environment.apiPath}/user/${cookies.tokenCookie}`)\n      .then((response) => {\n        setUserData(response);\n      })\n      .catch((error) => {\n        if (error.response) {\n          toast.error(\"Oups ! We couldn't get your user info\");\n        }\n      });\n\n  }, [cookies])\n\n  useEffect(() => {\n    axios\n      .get(`${environment.apiPath}/favourites`)\n      .then((response) => {\n        setIsLoading(true);\n        setFavouriteSpots(\n          R.uniq(response.data.map(\n            spot => ({\n              spot: spot.spot.toString(),\n              favId: spot.id \n            })\n          ))\n        )\n      })\n      .catch((error) => {\n        if (error.response) {\n          toast.error(\"Oups ! We couldn't get your favourites spots\");\n          setIsLoading(false);\n        }\n    });\n  }, [refetch])\n\n  useEffect(() => {\n    axios\n    .get(`${environment.apiPath}/spot`)\n    .then((response) => {\n      const spots = response.data.map(spot => (\n        R.isEmpty(favouriteSpots.filter(favSpot => favSpot.spot === spot.id))\n          ? spot\n          : { ...spot,\n              isFavouriteSpot: true,\n              favSpotId: favouriteSpots.filter(favSpot => favSpot.spot === spot.id)[0].favId\n            }\n      ))\n      setTimeout(() => setIsLoading(false), 2000)\n      // setIsLoading(false);\n      setSpots(spots);\n    })\n    .catch((error) => {\n      if (error.response) {\n        toast.error(\"Oups ! We couldn't get the spots\");\n        setIsLoading(false);\n      }\n    });\n  }, [favouriteSpots])\n\n  return (\n    <div className=\"main d-flex flex-wrap justify-content-center\">\n      <NavBar userInfo={userData} />\n        <GoogleMap spots={spots} isLoading={isLoading}/>\n    </div>\n  );\n};\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}